extends layout

block content
	.main.container
		.row
			.col-md-9.col-md-offset-1
				h1.display-4.m-b-2 Nuevo croquis
				script.
					function clearCanvas(){
						var canvas = document.getElementById('frame');
						var dataUrl = canvas.toDataURL();
						canvas.width = canvas.width;
						var ctx = canvas.getContext("2d");
						var background = new Image();
						background.src = $('#noimage')[0].currentSrc;
						ctx.strokeStyle = "#ff1515";
						ctx.lineWith = 2;
						ctx.drawImage(background,0,0);
					}
				input#camera(type="file", accept="image/*", capture="camera")
				img#noimage(style={visibility: 'hidden', position: 'absolute'})
				button.btn.btn-primary#clear-button(type='button', onclick='javascript:clearCanvas();', style={visibility: 'hidden', margin:'10px 0 0 0'}) Borrar todo
				
				script.
					document.getElementById('camera').onchange = function (e) {
						loadImage(
							e.target.files[0],
							function (img) {
									document.body.appendChild(img);
									$('#noimage').attr('src',img.toDataURL());
									var canvas = document.body.getElementsByTagName('canvas')[0];
									var ctx = canvas.getContext("2d");
									ctx.strokeStyle = "#ff1515";
									ctx.lineWith = 2;
									$('#clear-button').css('visibility','visible');
									canvas.setAttribute('id','frame');
									// Set up mouse events for drawing
									var drawing = false;
									var mousePos = { x:0, y:0 };
									var lastPos = mousePos;
									canvas.addEventListener("mousedown", function (e) {
											drawing = true;
									lastPos = getMousePos(canvas, e);
									}, false);
									canvas.addEventListener("mouseup", function (e) {
									drawing = false;
									}, false);
									canvas.addEventListener("mousemove", function (e) {
									mousePos = getMousePos(canvas, e);
									}, false);

									// Get the position of the mouse relative to the canvas
									function getMousePos(canvasDom, mouseEvent) {
										var rect = canvasDom.getBoundingClientRect();
										return {
											x: mouseEvent.clientX - rect.left,
											y: mouseEvent.clientY - rect.top
										};
									}
									// Get a regular interval for drawing to the screen
									window.requestAnimFrame = (function (callback) {
											return window.requestAnimationFrame || 
												window.webkitRequestAnimationFrame ||
												window.mozRequestAnimationFrame ||
												window.oRequestAnimationFrame ||
												window.msRequestAnimaitonFrame ||
												function (callback) {
											window.setTimeout(callback, 1000/60);
												};
									})();
									// Draw to the canvas
									function renderCanvas() {
										if (drawing) {
											ctx.moveTo(lastPos.x, lastPos.y);
											ctx.lineTo(mousePos.x, mousePos.y);
											ctx.stroke();
											lastPos = mousePos;
										}
									}

									// Allow for animation
									(function drawLoop () {
										requestAnimFrame(drawLoop);
										renderCanvas();
									})();

									// Set up touch events for mobile, etc
									canvas.addEventListener("touchstart", function (e) {
										mousePos = getTouchPos(canvas, e);
										var touch = e.touches[0];
										var mouseEvent = new MouseEvent("mousedown", {
											clientX: touch.clientX,
											clientY: touch.clientY
										});
										canvas.dispatchEvent(mouseEvent);
									}, false);
									canvas.addEventListener("touchend", function (e) {
										var mouseEvent = new MouseEvent("mouseup", {});
										canvas.dispatchEvent(mouseEvent);
									}, false);
									canvas.addEventListener("touchmove", function (e) {
									var touch = e.touches[0];
										var mouseEvent = new MouseEvent("mousemove", {
											clientX: touch.clientX,
											clientY: touch.clientY
										});
										canvas.dispatchEvent(mouseEvent);
									}, false);

									// Get the position of a touch relative to the canvas
									function getTouchPos(canvasDom, touchEvent) {
										var rect = canvasDom.getBoundingClientRect();
										return {
											x: touchEvent.touches[0].clientX - rect.left,
											y: touchEvent.touches[0].clientY - rect.top
										};
									}
									// Prevent scrolling when touching the canvas
									document.body.addEventListener("touchstart", function (e) {
									if (e.target == canvas) {
										e.preventDefault();
									}
									}, false);
									document.body.addEventListener("touchend", function (e) {
									if (e.target == canvas) {
										e.preventDefault();
									}
									}, false);
									document.body.addEventListener("touchmove", function (e) {
										if (e.target == canvas) {
											e.preventDefault();
										}
									}, false);
							},
							{
								maxWidth: 800,
								canvas: true,
								cover: true
							} // Options
						);
					};


